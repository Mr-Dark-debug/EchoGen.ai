name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: version
        run: |
          # Get version from pubspec.yaml
          VERSION=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          BUILD_NUMBER=$(grep '^version: ' pubspec.yaml | cut -d '+' -f 2)
          
          # If no build number, use commit count
          if [ -z "$BUILD_NUMBER" ]; then
            BUILD_NUMBER=$(git rev-list --count HEAD)
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Version: $VERSION+$BUILD_NUMBER"

  build-android:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'

      - name: Upgrade Flutter to latest stable
        run: |
          flutter upgrade --force
          flutter --version

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: |
          echo "🧹 Cleaning Flutter project..."
          flutter clean
          echo "📦 Getting dependencies..."
          flutter pub get
          echo "🔍 Checking dependencies..."
          flutter pub deps

      - name: Update version in pubspec.yaml
        run: |
          echo "📝 Updating version in pubspec.yaml..."
          NEW_VERSION="${{ needs.version.outputs.version }}+${{ needs.version.outputs.build-number }}"
          echo "Setting version to: $NEW_VERSION"

          # Use perl for cross-platform compatibility
          perl -i -pe "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml

          echo "✅ Updated version to: $(grep '^version:' pubspec.yaml)"

      - name: Analyze code
        run: |
          echo "🔍 Analyzing code..."
          flutter analyze || echo "⚠️ Analysis completed with warnings"
        continue-on-error: true

      - name: Run tests (optional)
        run: |
          echo "🧪 Running tests..."
          flutter test || echo "⚠️ Tests failed but continuing build"
        continue-on-error: true

      - name: Build APK
        run: |
          echo "🔨 Building APK..."
          flutter build apk --release --verbose --dart-define=FLUTTER_WEB_USE_SKIA=true
          echo "📱 APK build completed!"
          ls -la build/app/outputs/flutter-apk/
          echo "APK size: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)"

      - name: Build App Bundle
        run: |
          echo "📦 Building App Bundle..."
          flutter build appbundle --release --verbose --dart-define=FLUTTER_WEB_USE_SKIA=true
          echo "📱 App Bundle build completed!"
          ls -la build/app/outputs/bundle/release/
          echo "AAB size: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)"

      - name: Sign APK
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          echo "APK signing would go here"
          # Add your APK signing logic here if needed

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    needs: version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'

      - name: Upgrade Flutter to latest stable
        run: |
          flutter upgrade --force
          flutter --version

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: |
          echo "🧹 Cleaning Flutter project..."
          flutter clean
          echo "📦 Getting dependencies..."
          flutter pub get
          echo "🔍 Checking dependencies..."
          flutter pub deps

      - name: Update version in pubspec.yaml
        run: |
          echo "📝 Updating version in pubspec.yaml..."
          NEW_VERSION="${{ needs.version.outputs.version }}+${{ needs.version.outputs.build-number }}"
          echo "Setting version to: $NEW_VERSION"

          # Use perl for cross-platform compatibility
          perl -i -pe "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml

          echo "✅ Updated version to: $(grep '^version:' pubspec.yaml)"

      - name: Analyze code
        run: |
          echo "🔍 Analyzing code..."
          flutter analyze || echo "⚠️ Analysis completed with warnings"
        continue-on-error: true

      - name: Setup iOS dependencies
        run: |
          echo "🔧 Setting up iOS dependencies..."
          cd ios
          pod install --repo-update
          cd ..

      - name: Build iOS (No Codesign)
        run: |
          echo "🍎 Building iOS..."
          flutter build ios --release --no-codesign --verbose
          echo "📱 iOS build completed!"
          ls -la build/ios/iphoneos/

      - name: Create iOS Archive
        run: |
          echo "Creating iOS archive..."
          cd build/ios/iphoneos
          if [ -d "Runner.app" ]; then
            mkdir -p Payload
            cp -r Runner.app Payload/
            zip -r ../../../EchoGenAI-iOS-${{ needs.version.outputs.version }}.ipa Payload/
            cd ../../..
            ls -la EchoGenAI-iOS-${{ needs.version.outputs.version }}.ipa
          else
            echo "Runner.app not found, listing directory contents:"
            ls -la
            exit 1
          fi

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: EchoGenAI-iOS-${{ needs.version.outputs.version }}.ipa

  release:
    needs: [version, build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts
        continue-on-error: true

      - name: Download Android App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: ./artifacts
        continue-on-error: true

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts
        continue-on-error: true

      - name: List and rename artifacts
        run: |
          echo "Listing downloaded artifacts:"
          ls -la ./artifacts/ || echo "No artifacts directory"

          # Create artifacts directory if it doesn't exist
          mkdir -p ./artifacts

          # Rename Android artifacts if they exist
          if [ -f "./artifacts/app-release.apk" ]; then
            mv ./artifacts/app-release.apk ./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.apk
            echo "✅ Renamed Android APK"
          else
            echo "❌ Android APK not found"
          fi

          if [ -f "./artifacts/app-release.aab" ]; then
            mv ./artifacts/app-release.aab ./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.aab
            echo "✅ Renamed Android AAB"
          else
            echo "❌ Android AAB not found"
          fi

          # Check iOS IPA
          if [ -f "./artifacts/EchoGenAI-iOS-${{ needs.version.outputs.version }}.ipa" ]; then
            echo "✅ iOS IPA found"
          else
            echo "❌ iOS IPA not found"
          fi

          echo "Final artifacts:"
          ls -la ./artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using recent commits"
            COMMITS=$(git log --pretty=format:"- %s" --max-count=10)
          else
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi

          # If no commits, use a default message
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial release"
          fi

          # Create changelog file
          cat > release_notes.txt << 'EOF'
          ## 🎉 What's New in v${{ needs.version.outputs.version }}

          ### 🚀 Features & Improvements
          COMMITS_PLACEHOLDER

          ### 📱 Downloads
          - **Android APK**: For direct installation on Android devices
          - **Android AAB**: For Google Play Store distribution
          - **iOS IPA**: For iOS devices (requires sideloading)

          ### 🔧 Installation Instructions

          #### Android APK
          1. Download the APK file
          2. Enable "Install from unknown sources" in your device settings
          3. Install the APK file

          #### iOS IPA
          1. Download the IPA file
          2. Use AltStore, Sideloadly, or similar tools to install
          3. Trust the developer certificate in Settings > General > VPN & Device Management

          ### 🐛 Bug Reports
          Found an issue? Please report it on our [GitHub Issues](https://github.com/Mr-Dark-debug/EchoGen.ai/issues) page.

          ### ❤️ Support
          If you find EchoGen.ai helpful, consider [supporting the project](https://buymeacoffee.com/mrdarkdebug)!
          EOF

          # Replace placeholder with actual commits
          perl -i -pe "s/COMMITS_PLACEHOLDER/$COMMITS/g" release_notes.txt

          # Save to GitHub output
          {
            echo "changelog<<CHANGELOG_EOF"
            cat release_notes.txt
            echo "CHANGELOG_EOF"
          } >> $GITHUB_OUTPUT

      - name: Prepare release files
        id: prepare_files
        run: |
          # Create a list of files that actually exist
          FILES=""

          if [ -f "./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.apk" ]; then
            FILES="$FILES./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.apk"$'\n'
            echo "✅ Android APK will be included"
          fi

          if [ -f "./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.aab" ]; then
            FILES="$FILES./artifacts/EchoGenAI-Android-v${{ needs.version.outputs.version }}.aab"$'\n'
            echo "✅ Android AAB will be included"
          fi

          if [ -f "./artifacts/EchoGenAI-iOS-v${{ needs.version.outputs.version }}.ipa" ]; then
            FILES="$FILES./artifacts/EchoGenAI-iOS-v${{ needs.version.outputs.version }}.ipa"$'\n'
            echo "✅ iOS IPA will be included"
          fi

          # Remove trailing newline
          FILES=$(echo "$FILES" | sed '/^$/d')

          echo "files<<FILES_EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "FILES_EOF" >> $GITHUB_OUTPUT

          echo "Files to include in release:"
          echo "$FILES"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: EchoGen.ai v${{ needs.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: ${{ steps.prepare_files.outputs.files }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          echo "✅ Release v${{ needs.version.outputs.version }} created successfully!"
          echo "📱 Android APK: EchoGenAI-Android-v${{ needs.version.outputs.version }}.apk"
          echo "📦 Android AAB: EchoGenAI-Android-v${{ needs.version.outputs.version }}.aab"
          echo "🍎 iOS IPA: EchoGenAI-iOS-v${{ needs.version.outputs.version }}.ipa"
